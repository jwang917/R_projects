geom_point(aes(x= displ, y = hwy))+
facet_grid(class,nrow=2)
ggplot(df)+
geom_point(aes(x= displ, y = hwy))+
facet_grid(class,nrows=2)
ggplot(df)+
geom_point(aes(x= displ, y = hwy))+
facet_wrap(~class,nrow=2)
?geom_smooth
#exercies 3.6.1.6
p <- ggplot(data=df,aes(x=displ,y=hwy))
p+geom_point()+geom_smooth(se=F,color="blue")
p+geom_point(size=4)+geom_smooth(se=F,color="blue")
p+geom_point(size=4)+geom_smooth(se=F,aes(group=drv]))
p+geom_point(size=4)+geom_smooth(se=F,aes(group=drv))
p+geom_point(aes(color=drv))
p+geom_point(aes(color=drv))+geom_smooth(se=F,aes(color=drv))
p+geom_point(aes(color=drv))+geom_smooth(se=F)
p+geom_point(aes(color=drv))+geom_smooth(se=F,aes(color=drv))
p+geom_point(aes(color=drv))+geom_smooth(se=F,aes(group=drv))
p+geom_point(aes(color=drv))+geom_smooth(se=F,aes(color=drv))
p+geom_point(aes(color=drv))+geom_smooth(se=F,aes(color=drv),color="blue")
p+geom_point(aes(color=drv))+geom_smooth(se=F,aes(color=drv))
p+geom_point(aes(color=drv))+geom_smooth(se=F,aes(linetype=drv))
p+geom_point(aes(color=drv),alpha=0.8)+
p+geom_point(aes(color=drv),alpha=0.8)
p+geom_point(aes(color=drv),alpha=0.8)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..,group=..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y =..prop..,fill=color))
?stat_summary
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
ggplot(diamonds)+geom_boxplot(aes(x=cut,y=depth))
ggplot(diamonds)+geom_boxplot(aes(x=cut,y=depth))
p+geom_col()
p+geom_point()
p+geom_bar()
ggplot(data=df)+geom_col(aes(x=displ))
ggplot(data=df)+geom_bar(aes(x=displ))
ggplot(data=df)+geom_col(aes(x=displ))
?geom_col
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y =..prop..,fill=color))
?geom_jitter
ggplot(data=df)+geom_jitter(aes(x=cty,y=hwy),width=0.3)
ggplot(data=df)+geom_jitter(aes(x=cty,y=hwy),width=0.45)
ggplot(data=df)+geom_jitter(aes(x=cty,y=hwy),width=0.05)
ggplot(data=df)+geom_jitter(aes(x=cty,y=hwy),width=0.35)
?geom_count
?geom_count
ggplot(data=df)+geom_count(aes(cty,hwy))
ggplot(data=df)+geom_sum(aes(cty,hwy))
ggplot(data=df)+stat_sum(aes(cty,hwy))
bar + coord_polar()
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
nz <- map_data("nz")
install.packages("map_data")
library(map_data)
View(tempMap)
stringr::str_subset(words,"d{2}")
stringr::str_subset(words,"d{3}")
stringr::str_subset(words,"d{1}")
stringr::str_subset(words,"d{2}")
stringr::str_subset(words,"d{3}")
stringr::str_subset(words,"d{2}")
10352/987653
?/
10352//987653 #
2^6*99
914545%%33
cat("\014")
2^6*99
cat("\014")
?list
list = ls()
rm(list=ls())
cat("\014")
summarise(iris,meanv = mean(Sepal.Length))
#check installed package
installed.packages()
?installed.packages
#see all loaded package
search()
#load the package
library(dplyr)
#detach a package
detach(dplyr)
#detach a package
detach("package:dplyr",unload=T)
#detach a package
detach("package:ggplot2",unload=T)
#detach a package
detach("package:tidyverse",unload=T)
myVec <- rnorm(10000,mean=10,sd=5)
system.time{
system.time(
myVec <- rnorm(10000,mean=10,sd=5)
)
system.time(
myVec <- rnorm(1000000,mean=10,sd=5)
)
myDF <- tibble(myVec)
system.time(
myVec <- rnorm(1000000,mean=10,sd=5)
)
system.time(
myVec <- rnorm(10000000,mean=10,sd=5)
)
system.time(
myVec <- rnorm(100000000,mean=10,sd=5)
)
system.time(
myVec <- rnorm(1000000000,mean=10,sd=5)
)
myDF <- tibble(sapSize,time)
sapSize <- c(1000000,10000000,100000000,1000000000)
time <- c(0.073,0.667,6.458,66.591)
myDF <- tibble(sapSize,time)
library(tidyverse)
ggplot(data=myDF,aes(x=sapSize,y=time))+
geom_line(linetype="dotted")+
geom_point(size=4)+
xlab("The sample size")+
ylab("The running time")
sapSize.m <- sapSize/1000000
myDF <- tibble(sapSize.m,time)
ggplot(data=myDF,aes(y=sapSize.m,x=time))+
geom_line(linetype="dotted")+
geom_point(size=4)+
xlab("The running time")+
ylab("The sample size of random variates in Millions")
ggplot(data=myDF,aes(y=sapSize.m,x=time))+
geom_line(linetype="dotted")+
geom_point(size=4)+
xlab("The running time")+
ylab("The sample size of random variates in Millions")+
scale_y_continuous(labels = comma)
rm(list=ls())
library(tibble)
system.time(
myVec <- rnorm(1000000,mean=10,sd=5)
)
time <- c(0.073,0.667,6.458,66.591)
sapSize <- c(1000000,10000000,100000000,1000000000)
sapSize.m <- sapSize/1000000
myDF <- tibble(sapSize.m,time)
library(tidyverse)
ggplot(data=myDF,aes(y=sapSize.m,x=time))+
geom_line(linetype="dotted")+
geom_point(size=4)+
xlab("The running time")+
ylab("The sample size of random variates in Millions")+
scale_y_continuous(labels = comma)
knitr::kable(dplyr::select(myDF[1]))
knitr::kable(myDF)
knitr::kable(myDF)
myDF
knitr::kable(dplyr::slice(mtcars,1:5))
?type
?type
vec <- seq(from=99,to = 96,by=-1)
typeof(vec[1])
typeof(100)
typeof(100)
mode(100)
(.packages())
mode('a')
mode(TRUE)
mode(0.4)
typeof(100L)
mode(100L)
myFavNum <- 3.1415
myNums <- c(1, 3, 55, 33, 86, -sqrt(2), -110) # also works myNums <- 1:7
firstNames <- c("Jeff", "Terence", "David")
myVec <- c("Parr", 99)
d <- myFavNum+myNums[7]
d
dd <- myFavNum+myNums
sum <- myFavNum+sum(myNums)
(sum <- myFavNum+sum(myNums))
rs <- myVec[2]+myNums[2]
#create double NAs
NA_real_
#create double NAs
NA_real_(10)
(order(myVec))
#use order to arrange the vector, which will give the index of small value to large value.
myVec <- c(99.1, 98.2, 97.3, 96.4)
(order(myVec))
# Use the order sequence to print the ordered vector.
myVec[order(myVec)]
myVec[-1]
myVec[-c(-1)]
myVec[c(-1)]
myVec[-c(-1)]
myAtomicVector <- c(1, 4, 3, 2, NA, 3.22, -44, 2, NA, 0, 22, 34)
myAt <- c(1, 4, 3, 2, NA, 3.22, -44, 2, NA, 0, 22, 34)
sum(myAt>0,na.rm=T)
sum(myAt==0,na.rm=T)
sum(is.na(myAt),na.rm=T)
sum((!is.na(myAt))&(myAt!=0),na.rm=T)
sum((!is.na(myAt))&(myAt!=0))
sum( myAt>0|myAt<0)
sum( myAt>0|myAt<0,na.rm=T)
myAt[myAt>0|myAt<0]
x1 <- list(c(1, 2), c(3, 4))
x1[1]
typeof(x1[1])
class(x1[1])
class(x1[1])
x2 <- list(list(1, 2), list(3, 4))
class(x2[1])
x1[[2]]
typeof(x1[[2]])
class(x1[[2]])
class(x1[[2]][1])
class(x1[2][1])
x1[2]
x1[2][1]
x1[2][[1]]
x1[[2]][[1]]
bodyType <- factor(c("healthy", "healthy", "healthy", "obese", "overweight", "overweight", "skinny"))
str(bodyType)
bodyType <- factor(c("h", "h", "h", "ob", "ov", "ov", "s"), levels = c("s", "h", "ov", "ob"),
labels = c("Skinny", "Healthy", "Overweight", "Obese"), ordered = TRUE)
levels(bodyType)
bodyType[bodyType<3]
bodyType[bodyType<"Overweight"]
mycyl <- mtcars$cyl
str(mycyl)
mycyl
mycYl <- factor(mycyl,levels=c(4,6,8),labels=c("Small","Medium","Large"),ordered = T)
sum(mycYl<="Medium",na.rm=T)
length(mycYl[mycYl<="Medium"])
groups <- cut(ageData,breaks=c(-Inf,2,5,9,12,19,65,Inf),levles=c("infant", "toddler", "child", "tween", "teen", "adult", "senior"),labels = c("infant", "toddler", "child", "tween", "teen", "adult", "senior"),ordered=T)
ageData <- round(runif(1000000, 0, 120))
groups <- cut(ageData,breaks=c(-Inf,2,5,9,12,19,65,Inf),levles=c("infant", "toddler", "child", "tween", "teen", "adult", "senior"),labels = c("infant", "toddler", "child", "tween", "teen", "adult", "senior"),ordered=T)
knitr::kable(groups)
x <- matrix(1:10, ncol = 5, nrow = 2)
x[:,1]
x[,1]
x
x[,1:3]
y<- array(1:12, c(2, 3, 2)
y<- array(1:12, c(2, 3, 2))
y <- array(1:12, c(2, 3, 2))
y[1]
y
y[,,1]
(y)
y[,,1]
y[,,2]
(y)
x
(y)
0:3
x <- 0:3
as.logical(x)
seqq <- seq(1,5,1)
typeof(seqq)
seqq <- 1:5
typeof(seqq)
?logical
logical(T,F)
df1 <- dplyr::starwars %>% select(height, homeworld) %>%
group_by(homeworld) %>%
summarise(meanHeight = mean(height, na.rm = T)) %>%
arrange(desc(meanHeight)) %>% ungroup() %>%
head(5)
View(df1)
df2 <- dplyr::starwars %>% select(height, homeworld) %>%
filter(homeworld %in% x[["homeworld"]])
df2 <- dplyr::starwars %>% select(height, homeworld) %>%
filter(homeworld in x[["homeworld"]])
myDF <- data.frame(year=x,annualReturn = y)
x <- as.character(1949:2017)
y <- runif(length(x),-20,20)
myDF <- data.frame(year=x,annualReturn = y)
ggplot(myDF)+geom_path(aes(x=year,y=annualReturn))
ggplot(myDF)+geom_path(aes(x=year,y=annualReturn),group=year)
ggplot(myDF)+geom_path(aes(x=year,y=annualReturn),group=x)
ggplot(myDF)+geom_path(aes(x=year,y=annualReturn),group=1)
ggplot(myDF)+geom_line(aes(x=year,y=annualReturn),group=1)
census <- read.csv("~/classes/msan593/data/2015census.csv")
library(magrittr)
census %>% group_by(State) %>%
smmarize(totalPopu = sum(TotalPop)) %>%
mutate(popPerct = totalPopu/sum(totalPopu) * 100) %>%
arrange(desc(popPerct)) %>%
head(5) %>%
knitr::kable()
library(dplyr)
census %>% group_by(State) %>%
smmarize(totalPopu = sum(TotalPop)) %>%
mutate(popPerct = totalPopu/sum(totalPopu) * 100) %>%
arrange(desc(popPerct)) %>%
head(5) %>%
knitr::kable()
census %>% group_by(State) %>%
smmarise(totalPopu = sum(TotalPop)) %>%
mutate(popPerct = totalPopu/sum(totalPopu) * 100) %>%
arrange(desc(popPerct)) %>%
head(5) %>%
knitr::kable()
census %>% group_by(State) %>%
summarise(totalPopu = sum(TotalPop)) %>%
mutate(popPerct = totalPopu/sum(totalPopu) * 100) %>%
arrange(desc(popPerct)) %>%
head(5) %>%
knitr::kable()
census %>% count(TotalPop) %>% knitr::kable()
census %>% count(State) %>% knitr::kable()
census %>% group_by(State) %>%
summarise(totalPopu = sum(TotalPop)) %>%
mutate(popPerct = totalPopu/sum(totalPopu) * 100) %>%
arrange(desc(popPerct)) %>%
head(5) %>%
knitr::kable()
census1 <- census
census1 <- census %>% select(State,TotalPop)
census1 %>% group_by(State) %>% summarise(tot=sum(TotalPop))
census1 %>% group_by(State) %>% summarise(tot=sum(TotalPop)) %>% arrange(desc(tot))
str_subset(state.name,"z")
str_subset(state.name,"(ss)+")
str_subset(state.name,"(ss){1,2}")
str_subset(state.name,"s{1,2}")
str_subset(state.name,"ii")
str_subset(state.name,"i.*i")
str_subset(state.name,"i\\W*i")
str_subset(state.name,"i\\w*i")
str_subset(state.name,"\\t+")
str_subset(state.name,"(\\t)+")
str_subset(state.name,"(\t)+")
str_subset(state.name,"( )+")
str_subset(state.name,"\\s+")
str_subset(state.name,"^[North|South]{1}")
str_subset(state.name,"^(North|South){1}")
#q2
str_subset(fruit,"(melons?)")
str_subset(fruit,"berry")
str_subset(fruit,"\\S?berry")
str_subset(fruit,"\\S{1}berry")
str_subset(fruit,"berry")
#q3 write us phone number's regex
phone <- c("765-418-6533","+1-010-001-0001")
str_subset(phone,"^\\d{3}-\\d{3}-\\d{4}$")
str_subset(phone,"^(\\+1)?-\\d{3}-\\d{3}-\\d{4}$")
str_subset(phone,"^(?\\d{3})?-\\d{3}-\\d{4}$")
str_subset(phone,"^\\(?\\d{3}\\)?-\\d{3}-\\d{4}$")
str_subset(phone,"^(\\+1)? ?(\\(?\\d{3}\\)?|\\d{3})-\\d{3}-\\d{4}$")
myIntVec <- c(1,0,-1)
ifelse(myIntVec > 0, "positive", ifelse(myIntVec < 0, "negative", "neither"))
ifelse(myIntVec > 0, "positive", ifelse(myIntVec < 0, "negative", ""))
ifelse(myIntVec > 0, "positive", ifelse(myIntVec < 0, "negative"))
muFunc <- function(maxIter = 10, reps=10,k) maxIter*reps + k
myFunc()
myFunc()
muFunc <- function(maxIter = 10, reps=10,k) maxIter*reps + k
myFunc()
myFunc <- function(maxIter = 10, reps=10,k) maxIter*reps + k
myFunc()
myFunc(k=3)
myFunc(,,k=2)
myFunc(2)
#create double NAs
NA_real_(10)
x1 <- list(c(1, 2), c(3, 4))
class(x1[1])
x2 <- list(list(1, 2), list(3, 4))
class(x2[1])
class(x1[[2]][1])#3
x1[[2]][1]#3 4
x1[[2]][[1]]#3
class(x1[2][1])#
x <- matrix(1:10, ncol = 5, nrow = 2)
x
x[,1:3]
y <- array(1:12, c(2, 3, 2))
(y)
y[,,2]
seqq <- 1:5
typeof(seqq)
logical(T,F)
logical(T)
logical(TRUE)
?logical
df1 <- dplyr::starwars %>% select(height, homeworld) %>%
group_by(homeworld) %>%
summarise(meanHeight = mean(height, na.rm = T)) %>%
arrange(desc(meanHeight)) %>% ungroup() %>%
head(5)
df1 <- dplyr::starwars %>% select(height, homeworld) %>%
group_by(homeworld) %>%
summarise(meanHeight = mean(height, na.rm = T)) %>%
arrange(desc(meanHeight))  %>%
head(5)
View(df1)
df1 <- dplyr::starwars %>% select(height, homeworld) %>%
group_by(homeworld) %>%
summarise(meanHeight = mean(height, na.rm = T)) %>%
arrange(desc(meanHeight)) %>% ungroup() %>%
head(5)
View(df1)
myflights <- hflights::hflights
myflights %>%
count(Origin,Month) %>%
ggplot() +
geom_bar(aes(x = Origin, y = n, fill = factor(Month)), stat = "identity", position = "dodge") +
guides(fill = F) +
scale_y_continuous(labels = scales::comma) +
ylab("Frequency\n")
myflights %>%
count(Month, Origin) %>%
ggplot() +
geom_bar(aes(x = Origin, y = n, fill = factor(Month)), stat = "identity", position = "dodge") +
guides(fill = F) +
scale_y_continuous(labels = scales::comma) +
ylab("Frequency\n")
test <- myflights %>% count(Month,Origin)
test
View(test)
test <- myflights %>% count(Origin,Month)
test <- myflights %>% count(Month,Origin) %>% group_by(Origin) %>%
summarise(meanVal = mean())
test <- myflights %>% count(Month,Origin) %>% group_by(Origin) %>%
summarise(meanVal = mean(n))
test
test <- myflights %>% count(Origin,Month) %>% group_by(Origin) %>%
summarise(meanVal = mean(n))
test
test <- myflights %>% count(Origin,Month)
View(test)
test <- myflights %>% count(Origin,Month) %>% group_by(Origin) %>%
summarise(meanVal = mean(n))
test
myDF %>%
ggplot() +
geom_area(aes(x = year, y = numMovieReleases),  fill = "dodgerblue", alpha = 0.5, colour = "black") +
scale_x_continuous(breaks = seq(1900, 2000)) +
xlab("\nYear") +
ylab("Number of Movie Releases\n") +
theme_light()
myDF %>%
ggplot() +
geom_area(aes(x = year, y = numMovieReleases),group = 1,  fill = "dodgerblue", alpha = 0.5, colour = "black") +
scale_x_continuous(breaks = seq(1900, 2000)) +
xlab("\nYear") +
ylab("Number of Movie Releases\n") +
theme_light()
set.seed(44)
year<- seq(1990, 2000)
numMovieReleases <- round(abs(rnorm(11, 2, 10)))
genre <- factor(sample(size = 11, c("Horror", "Drama", "SciFi"), replace = T))
myDF <- data_frame(year, numMovieReleases, genre)
myDF %>%
ggplot() +
geom_area(aes(x = year, y = numMovieReleases),  fill = "dodgerblue", alpha = 0.5, colour = "black") +
scale_x_continuous(breaks = seq(1900, 2000)) +
xlab("\nYear") +
ylab("Number of Movie Releases\n") +
theme_light()
myDF %>%
ggplot() +
geom_area(aes(x = year, y = numMovieReleases), group = 1, fill = "dodgerblue", alpha = 0.5, colour = "black") +
scale_x_continuous(breaks = seq(1900, 2000)) +
xlab("\nYear") +
ylab("Number of Movie Releases\n") +
theme_light()
myDF %>%
ggplot() +
geom_area(aes(x = year, y = numMovieReleases),  fill = "dodgerblue", alpha = 0.5, colour = "black") +
scale_x_continuous(breaks = seq(1900, 2000)) +
xlab("\nYear") +
ylab("Number of Movie Releases\n") +
theme_light()
data <- mtcars
str(data)
data1 <- data %>% group_by(cyl,gear) %>% summarize(n=n())
data1
data1 %>% count(cyl)
View(data1)
str(data)
data1 <- data %>% group_by(cyl,gear,carb) %>% summarize(n=n())
View(data1)
View(data1)
data1 %>% count(carb)
data1 %>% count(carb)
data1 %>% count(gear)
data1 %>% count(cyl)
data1 %>% count(cyl,gear)
data1 <- data %>% group_by(cyl,gear) %>% summarize(n=n())
data1 %>% count(cyl,gear)
